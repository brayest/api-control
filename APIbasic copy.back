terraform {
  backend "s3" {}
}

#  ########### Providers ###########

provider "aws" {
  region = var.application_account_region

  assume_role {
    role_arn     = var.application_account_role_arn
    session_name = "terraform"
    external_id  = var.application_account_external_id
  }
}

#  ############ Infrastructure ############

data "aws_availability_zones" "available" {}

data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

module "common_tags" {
  source      = "../modules/tags"
  stack       = "oneconnect"
  customer    = var.customer_name
  environment = var.environment
}

# Dynamo DB
module "dynamodb_table" {
  source = "../modules/dynamodb"

  name      = module.common_tags.id
  hash_key  = "CUSTOMER_ID"
  range_key = "NAME"


  attributes = [
    {
      name = "CUSTOMER_ID"
      type = "S"
    },
    {
      name = "NAME"
      type = "S"
    }
  ]

  server_side_encryption_enabled = true

  tags = module.common_tags.tags
}

# Lambda Function

resource "aws_iam_policy" "lambda_role_policy" {
  name        = "${module.common_tags.id}-controller"
  path        = "/"
  description = "Dynamo dynamo_controller lambda policy"
  policy = templatefile("./files/lambda-dynamo-policy.json", {
    resource_arn = module.dynamodb_table.this_dynamodb_table_arn
  })
}

module "dynamo_controller" {
  source = "../modules/lambda_aws"

  function_name = module.common_tags.id
  description   = "Lambda function to read and write to a dynamo table"
  handler       = "dynamo.lambda_handler"
  runtime       = "python3.8"

  source_path   = "./functions/dynamo.py"
  attach_policy = true
  policy        = aws_iam_policy.lambda_role_policy.arn

  publish = true

  environment_variables = {
    DYNAMO_TABLE = module.dynamodb_table.this_dynamodb_table_id
  }

  allowed_triggers = {
    AllowExecutionFromAPIGateway = {
      service = "apigateway"
      arn     = module.api_gateway.this_apigatewayv2_api_execution_arn
    }
  }

  tags = module.common_tags.tags
}


# API Gateway
resource "random_pet" "this" {
  length = 2
}

resource "aws_cloudwatch_log_group" "logs" {
  name = random_pet.this.id
}


module "api_gateway" {
  source = "../modules/api_gateway"

  name          = module.common_tags.id
  description   = "One connect API GW"
  protocol_type = "HTTP"

  cors_configuration = {
    allow_headers = ["content-type", "x-amz-date", "authorization", "x-api-key", "x-amz-security-token", "x-amz-user-agent"]
    allow_methods = ["*"]
    allow_origins = ["*"]
  }

  # Custom domain
  domain_name                 = "ncloudstest.ondotcloud.com"
  domain_name_certificate_arn = "arn:aws:acm:us-east-2:882538723223:certificate/6d80431c-36f6-4847-ad6c-eee40834a40a"

  default_stage_access_log_destination_arn = aws_cloudwatch_log_group.logs.arn
  default_stage_access_log_format          = "$context.identity.sourceIp - - [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage"

  # Routes and integrations
  integrations = {
    "ANY /put" = {
      lambda_arn             = module.dynamo_controller.this_lambda_function_arn
      payload_format_version = "2.0"
      timeout_milliseconds   = 12000
    }

    "ANY /get" = {
      lambda_arn             = module.dynamo_controller.this_lambda_function_arn
      payload_format_version = "2.0"
      timeout_milliseconds   = 12000
    }

    "$default" = {
      lambda_arn = module.dynamo_controller.this_lambda_function_arn
    }
  }

  tags = module.common_tags.tags
}
